Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

//method 1

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        long long sum=1;
        long long ans=INT_MIN;
        //prefix multification
        for(int i=0;i<n;i++){
             sum*=nums[i];
             ans=max(ans,sum);
             //if multification zero then assign 1
             if(sum==0)
             sum=1;
        }
        sum=1;
        //suffix multipication
        for(int i=n-1;i>=0;i--){
            sum*=nums[i];
            ans=max(ans,sum);
            if(sum==0)
            sum=1;
        }
        return ans;
    }
};

//method 2
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n=nums.size();
        int pref=1;
        int ans=INT_MIN;
        int suff=1;
        //prefix multification
        for(int i=0;i<n;i++){
            if(pref==0)
            pref=1;
            if(suff==0)
            suff=1;
              
          suff=suff*nums[n-i-1];
          pref=pref*nums[i];
          ans=max(ans,max(suff,pref));
        }
        return ans;
    }
};
