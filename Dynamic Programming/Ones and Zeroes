You are given an array of binary strings strs and two integers m and n.
Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.






class Solution {
public:
//recursion
     /*int findmax(vector<string>& strs, int m, int n,int index){
        if(index == strs.size()){
            return 0;
        }
        int countzeros=count(strs[index].begin(),strs[index].end(),'0');
        int countones=strs[index].size()-countzeros;
         
         if(m-countzeros>=0 && n-countones>=0){
            return max(1+findmax(strs,m-countzeros,n-countones,index+1),findmax(strs,m,n,index+1));
         }
         return findmax(strs,m,n,index+1);

     }
    int findMaxForm(vector<string>& strs, int m, int n) {
         return  findmax(strs,m,n,0);
    }
};*/

//memeo
    /* vector<vector<vector<int>>> dp;
     int findmax(vector<string>& strs, int m, int n,int index){

        if(index == strs.size())
        return 0;
        if(dp[m][n][index]!=-1){
            return dp[m][n][index];
        }
        int countzeros=count(strs[index].begin(),strs[index].end(),'0');
        int countones=strs[index].size()-countzeros;
         
         if(m-countzeros>=0 && n-countones>=0){
            return dp[m][n][index]=max(1+findmax(strs,m-countzeros,n-countones,index+1),findmax(strs,m,n,index+1));
         }
         return dp[m][n][index]=findmax(strs,m,n,index+1);

     }

int findMaxForm(vector<string>& strs, int m, int n) {
    dp.resize(m+1,vector<vector<int>> (n+1,vector<int>(strs.size(),-1)));
     return findmax(strs,m,n,0);
}
};*/
//tabulation
int findMaxForm(vector<string>& strs, int m, int n) {
      vector<vector<vector<int>>> dp(strs.size()+1,vector<vector<int>>(m+1,vector<int>(n+1)));
      for(int i=1;i<=strs.size();i++){
        //zeros ke liye
        int countzeros=count(strs[i-1].begin(),strs[i-1].end(),'0');
        int countones=strs[i-1].size()-countzeros;
        for(int j=0;j<=m;j++){
            //ones ke liye
            for(int k=0;k<=n;k++){
                if(j-countzeros>=0 && k-countones>=0)
                  dp[i][j][k]=max(1+dp[i-1][j-countzeros][k-countones],dp[i-1][j][k]);
                  else dp[i][j][k]= dp[i-1][j][k];

            }
        }
      }
      return dp[strs.size()][m][n];
}
};
