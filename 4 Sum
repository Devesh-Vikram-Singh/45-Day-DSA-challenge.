Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]


 vector<vector<int>> fourSum(vector<int>& nums, int target) {
           set<vector<int>> s;
          vector<vector<int>> ans;
          sort(nums.begin(),nums.end());
          if(nums.size()<4){
              return ans;
          }
          int n =nums.size();
          for(int i=0;i<n-3;i++){
              for(int j=i+1;j<n-2;j++){
                  int k=j+1;
                  int l =n-1;
                  int val1=nums[i];
                  int val2=nums[j];
                  while(k<l){
                        long long sum1=val1+val2;
                        long long sum2=nums[k]+nums[l];
                      long long sum = sum1+sum2;
                      if(sum==target){
                          s.insert({nums[i],nums[j],nums[k],nums[l]});
                          k++;
                          l--;

                      }
                      else if(sum>target){
                          l--;
                      }
                      else{
                          k++;
                      }
                  }
              }
          }
          for(auto it:s){
              ans.push_back(it);
          }
          
               return ans;
        
    }
