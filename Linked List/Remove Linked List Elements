Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.

 

Example 1:


Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]
Example 2:

Input: head = [], val = 1
Output: []
Example 3:

Input: head = [7,7,7,7], val = 7
Output: []


class Solution {
public:
   /* ListNode* removeElements(ListNode* head, int val) {
        if(head == nullptr){
            return head;
        }
        while(head!=nullptr && head->val==val){
            head=head->next;
        }
           ListNode* curr=head;
           ListNode* prev=nullptr;

            while(curr!=nullptr){
               if(curr->val == val){
                   prev->next = curr->next;
                   curr = curr->next;
               }
               else{
                   prev=curr;
                   curr=curr->next;
               }
           }
           return head;
    }
};*/

ListNode* removeElements(ListNode* head, int val) {
    if(head==NULL )
    return NULL;
    //1->1->2
    //1->1->1 for this LL
    while(head!=NULL && head->val==val){
        head=head->next;
    }
    ListNode* curr= head;
    while(curr!=NULL && curr->next!=NULL){
        if(curr->next->val==val){
            curr->next=curr->next->next;
        }
        else{
            curr=curr->next;
        }
    }
    return head;
}
};
