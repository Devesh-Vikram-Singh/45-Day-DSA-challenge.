Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(0,1),(1,2),(2,3),(3,0),(0,2)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.
Example 2:

Input:
N = 3
M = 2
E = 3
Edges[] = {(0,1),(1,2),(0,2)}
Output: 0



 bool isSafe(int node,int colors[],bool graph[101][101],int n,int currentColor){
        for(int k=0;k<n;k++){
         //graph[k][node]==1 means adjacent node and i am trying to give the same color colrs[k]==col then it would gave a false
           if(k!=node && graph[k][node]==1 && colors[k]==currentColor)
            return false;
     }
   return true;
     }
 bool solve(int node,int colors[],bool graph[101][101],int n,int m){
       if(node == n)
      return true;
     //for colors 
      for(int i=1;i<=m;i++){
          if(isSafe(node,colors,graph,n,i)){
             colors[node]=i;
          if(solve(node+1,colors,graph,n,m))
           return true;
           //backtrack
           colors[node]=0;
      }
        }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int n) {
       int colors[n]={0};
      if(solve(0,colors,graph,n,m))
        return true;
       else 
       return false;
    }
};
