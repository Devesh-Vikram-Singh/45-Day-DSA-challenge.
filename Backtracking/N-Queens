The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.
Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:
Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]


class Solution {
public: 
    bool isSafe(int row,int col,int n,vector<string> &board){
        int dulrow=row;
        int dulcol=col;
        //upper diagonal
        while(row>=0 && col>=0){
            if(board[row][col]=='Q')
            return false;
            row--;
            col--;
        }
        row=dulrow;
        col=dulcol;
        //seedha col ke liye
        while( col>=0){
            if(board[row][col]=='Q')
            return false;
            
            col--;
        }
         row=dulrow;
        col=dulcol;
        //lower diagonal ke liye
        while(row<n && col>=0){
            if(board[row][col]=='Q')
            return false;
            row++;
            col--;
        }
        return true;
    }
    void solve(int col,int n,vector<string> &board,vector<vector<string>> &ans){
        if(col == n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(isSafe(row,col,n,board)){
                board[row][col]='Q';
                solve(col+1,n,board,ans);
                // backtrack 
                board[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
       vector<vector<string>> ans;
       vector<string> board(n);
       string s(n,'.');
       for(int i=0;i<n;i++){
        board[i]=s;
       } 
       solve(0,n,board,ans);
       return ans;
    }
};
