Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


class Solution {
public:
 /* vector<vector<int>> ans;
  int n;
  void helper(unordered_map<int,int> &mp,vector<int> &temp){
         if(temp.size()==n){
            ans.push_back(temp);
            return;
         }
        for(auto &[num,count] :mp){
            if(count==0){
            continue;
            
        }
        temp.push_back(num);
        //element ke count ko decrease karna
        mp[num]--;
        //function call
        helper(mp,temp);
        //backtrack
        temp.pop_back();
        //element ke count ko increase karna
        mp[num]++;
     }
  }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
       n=nums.size();
       unordered_map<int,int> mp;
       for(int i=0;i<n;i++){
        mp[nums[i]]++;
       }
       vector<int> temp;
       helper(mp,temp);
       return ans;  
    }
};*/


//method 2
int n;
vector<vector<int>> ans;
void solve(vector<int>& nums,int index){

    if(index == n){
        ans.push_back(nums);
        return;
    }
     unordered_set<int> st;
    for(int i=index;i<n;i++){
        // means duplicate element
        if(st.find(nums[i]) != st.end()){
            continue;
        }
        //element ko st push karna
        st.insert(nums[i]);
        // swap karna
        swap(nums[i],nums[index]);
        solve(nums,index+1);
        //backtrack
        swap(nums[i],nums[index]);
    }
}
vector<vector<int>> permuteUnique(vector<int>& nums) {
           n=nums.size();
           solve(nums,0);
           return ans;

 }
};
