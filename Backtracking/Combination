Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.


#include <iostream>
#include<bits/stdc++.h>
using namespace std;
  vector<vector<int>> ans;
  
  void solve(int start,int &n,int k,vector<int> &temp){
      if(k==0){
          ans.push_back(temp);
          return;
      }
      if(start>n)
      return;
      temp.push_back(start);
      solve(start+1,n,k-1,temp);
      temp.pop_back();
      solve(start+1,n,k,temp);
  }
 void printAns() {
    cout << "[";
    for (int i = 0; i < ans.size(); ++i) {
        cout << "[";
        for (int j = 0; j < ans[i].size(); ++j) {
            cout << ans[i][j];
            if (j < ans[i].size() - 1) {
                cout << ",";
            }
        }
        cout << "]";
        if (i < ans.size() - 1) {
            cout << ",";
        }
    }
    cout << "]";
}
int main()
{
   int n;
   cin>>n;
   int k;
   cin>>k;
   vector<int> temp;
    solve(1,n,k,temp);
   printAns();
    
}
