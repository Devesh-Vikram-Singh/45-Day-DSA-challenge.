
Given an array arr[] of length n. Find all possible unique permutations of the array in sorted order. A sequence A is greater than sequence B if there is an index i for which Aj = Bj for all j<i and Ai > Bi.

Example 1:

Input: 
n = 3
arr[] = {1, 2, 1}
Output: 
1 1 2
1 2 1
2 1 1
Explanation:
These are the only possible unique permutations
for the given array.
Example 2:

Input: 
n = 2
arr[] = {4, 5}
Output: 
Only possible 2 unique permutations are
4 5
5 4







class Solution {
  public:
    void helper(vector<int> &arr,int n,vector<vector<int>> &ans,map<vector<int>,int> &mm, int index)
    {
        if(index==n){
            if(!mm[arr]){ //means not visted so add in ans
                ans.push_back(arr);
                mm[arr]=1;   // if visited then mark 1
            }
            return;
        }
        for(int i=index;i<n;i++){
            // swap with the index
            swap(arr[i],arr[index]);
            helper(arr,n,ans,mm,index+1);
            //then backtrack so they will rich intial position
            swap(arr[i],arr[index]);
        }
    }
    vector<vector<int>> uniquePerms(vector<int> &arr ,int n) {
        // code here
          vector<vector<int>> ans;
          map<vector<int>,int> mm;
          helper(arr,n,ans,mm,0);
          sort(ans.begin(),ans.end());
          return ans;
    }
};
